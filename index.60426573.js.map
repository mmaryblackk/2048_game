{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n/* eslint-disable no-shadow */ \"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   */ constructor(initialState){\n        this.size = 4;\n        this.score = 0;\n        this.status = \"idle\";\n        this.board = initialState || this.createEmptyBoard();\n    }\n    createEmptyBoard() {\n        return Array.from({\n            length: this.size\n        }, ()=>Array(this.size).fill(0));\n    }\n    moveLeft() {\n        let moved = false;\n        for(let row = 0; row < this.size; row++){\n            let newRow = this.board[row].filter((v)=>v !== 0);\n            for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                newRow[i] *= 2;\n                this.score += newRow[i];\n                newRow[i + 1] = 0;\n            }\n            newRow = newRow.filter((v)=>v !== 0);\n            while(newRow.length < this.size)newRow.push(0);\n            if (this.board[row].join(\",\") !== newRow.join(\",\")) moved = true;\n            this.board[row] = newRow;\n        }\n        if (moved) this.afterMove();\n        return moved;\n    }\n    moveRight() {\n        this.board = this.board.map((row)=>row.reverse());\n        const moved = this.moveLeft();\n        this.board = this.board.map((row)=>row.reverse());\n        return moved;\n    }\n    moveUp() {\n        this.transpose();\n        const moved = this.moveLeft();\n        this.transpose();\n        return moved;\n    }\n    moveDown() {\n        this.transpose();\n        const moved = this.moveRight();\n        this.transpose();\n        return moved;\n    }\n    transpose() {\n        const newBoard = this.createEmptyBoard();\n        for(let r = 0; r < this.size; r++)for(let c = 0; c < this.size; c++)newBoard[r][c] = this.board[c][r];\n        this.board = newBoard;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board.map((row)=>[\n                ...row\n            ]);\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    start() {\n        this.board = this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    restart() {\n        this.start();\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let r = 0; r < this.size; r++){\n            for(let c = 0; c < this.size; c++)if (this.board[r][c] === 0) emptyCells.push({\n                r: r,\n                c: c\n            });\n        }\n        if (emptyCells.length === 0) return;\n        const { r: r, c: c } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        this.board[r][c] = Math.random() < 0.9 ? 2 : 4;\n    }\n    afterMove() {\n        this.addRandomTile();\n        if (this.checkWin()) this.status = \"win\";\n        else if (!this.movesAvailable()) this.status = \"lose\";\n    }\n    checkWin() {\n        return this.board.some((row)=>row.includes(2048));\n    }\n    movesAvailable() {\n        for(let r = 0; r < this.size; r++)for(let c = 0; c < this.size; c++){\n            if (this.board[r][c] === 0) return true;\n            if (r < this.size - 1 && this.board[r][c] === this.board[r + 1][c]) return true;\n            if (c < this.size - 1 && this.board[r][c] === this.board[r][c + 1]) return true;\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$table = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$scoreDisplay = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$mainButton = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$message = document.querySelector(\".message-start\");\nfunction $09e991522ca7e64e$var$render() {\n    const state = $09e991522ca7e64e$var$game.getState();\n    const cells = $09e991522ca7e64e$var$table.querySelectorAll(\".field-cell\");\n    state.flat().forEach((value, index)=>{\n        const cell = cells[index];\n        cell.className = \"field-cell\";\n        if (value) {\n            cell.textContent = value;\n            cell.classList.add(`field-cell--${value}`);\n        } else cell.textContent = \"\";\n    });\n    $09e991522ca7e64e$var$scoreDisplay.textContent = $09e991522ca7e64e$var$game.getScore();\n    if ($09e991522ca7e64e$var$game.getStatus() === \"win\") document.querySelector(\".message-win\").classList.remove(\"hidden\");\n    else if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n}\n$09e991522ca7e64e$var$mainButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$mainButton.classList.contains(\"start\")) $09e991522ca7e64e$var$game.start();\n    else $09e991522ca7e64e$var$game.restart();\n    if ($09e991522ca7e64e$var$message) $09e991522ca7e64e$var$message.classList.add(\"hidden\");\n    document.querySelectorAll(\".message\").forEach((msg)=>msg.classList.add(\"hidden\"));\n    $09e991522ca7e64e$var$render();\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    let moved = false;\n    switch(e.key){\n        case \"ArrowLeft\":\n            moved = $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            moved = $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            moved = $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            moved = $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    if (moved) {\n        if ($09e991522ca7e64e$var$mainButton.classList.contains(\"start\")) {\n            $09e991522ca7e64e$var$mainButton.classList.remove(\"start\");\n            $09e991522ca7e64e$var$mainButton.classList.add(\"restart\");\n            $09e991522ca7e64e$var$mainButton.textContent = \"Restart\";\n        }\n    }\n    $09e991522ca7e64e$var$render();\n});\n\n\n//# sourceMappingURL=index.60426573.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst table = document.querySelector('.game-field');\nconst scoreDisplay = document.querySelector('.game-score');\nconst mainButton = document.querySelector('.start');\nconst message = document.querySelector('.message-start');\n\nfunction render() {\n  const state = game.getState();\n  const cells = table.querySelectorAll('.field-cell');\n\n  state.flat().forEach((value, index) => {\n    const cell = cells[index];\n\n    cell.className = 'field-cell';\n\n    if (value) {\n      cell.textContent = value;\n      cell.classList.add(`field-cell--${value}`);\n    } else {\n      cell.textContent = '';\n    }\n  });\n\n  scoreDisplay.textContent = game.getScore();\n\n  if (game.getStatus() === 'win') {\n    document.querySelector('.message-win').classList.remove('hidden');\n  } else if (game.getStatus() === 'lose') {\n    document.querySelector('.message-lose').classList.remove('hidden');\n  }\n}\n\nmainButton.addEventListener('click', () => {\n  if (mainButton.classList.contains('start')) {\n    game.start();\n  } else {\n    game.restart();\n  }\n\n  if (message) {\n    message.classList.add('hidden');\n  }\n\n  document\n    .querySelectorAll('.message')\n    .forEach((msg) => msg.classList.add('hidden'));\n  render();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  let moved = false;\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      moved = game.moveLeft();\n      break;\n    case 'ArrowRight':\n      moved = game.moveRight();\n      break;\n    case 'ArrowUp':\n      moved = game.moveUp();\n      break;\n    case 'ArrowDown':\n      moved = game.moveDown();\n      break;\n    default:\n      return;\n  }\n\n  if (moved) {\n    if (mainButton.classList.contains('start')) {\n      mainButton.classList.remove('start');\n      mainButton.classList.add('restart');\n      mainButton.textContent = 'Restart';\n    }\n  }\n  render();\n});\n","/* eslint-disable no-shadow */\n'use strict';\n\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   */\n  constructor(initialState) {\n    this.size = 4;\n    this.score = 0;\n    this.status = 'idle';\n    this.board = initialState || this.createEmptyBoard();\n  }\n\n  createEmptyBoard() {\n    return Array.from({ length: this.size }, () => Array(this.size).fill(0));\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    for (let row = 0; row < this.size; row++) {\n      let newRow = this.board[row].filter((v) => v !== 0);\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          this.score += newRow[i];\n          newRow[i + 1] = 0;\n        }\n      }\n      newRow = newRow.filter((v) => v !== 0);\n\n      while (newRow.length < this.size) {\n        newRow.push(0);\n      }\n\n      if (this.board[row].join(',') !== newRow.join(',')) {\n        moved = true;\n      }\n      this.board[row] = newRow;\n    }\n\n    if (moved) {\n      this.afterMove();\n    }\n\n    return moved;\n  }\n  moveRight() {\n    this.board = this.board.map((row) => row.reverse());\n\n    const moved = this.moveLeft();\n\n    this.board = this.board.map((row) => row.reverse());\n\n    return moved;\n  }\n  moveUp() {\n    this.transpose();\n\n    const moved = this.moveLeft();\n\n    this.transpose();\n\n    return moved;\n  }\n  moveDown() {\n    this.transpose();\n\n    const moved = this.moveRight();\n\n    this.transpose();\n\n    return moved;\n  }\n\n  transpose() {\n    const newBoard = this.createEmptyBoard();\n\n    for (let r = 0; r < this.size; r++) {\n      for (let c = 0; c < this.size; c++) {\n        newBoard[r][c] = this.board[c][r];\n      }\n    }\n    this.board = newBoard;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board.map((row) => [...row]);\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  restart() {\n    this.start();\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let r = 0; r < this.size; r++) {\n      for (let c = 0; c < this.size; c++) {\n        if (this.board[r][c] === 0) {\n          emptyCells.push({\n            r,\n            c,\n          });\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const { r, c } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.board[r][c] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  afterMove() {\n    this.addRandomTile();\n\n    if (this.checkWin()) {\n      this.status = 'win';\n    } else if (!this.movesAvailable()) {\n      this.status = 'lose';\n    }\n  }\n\n  checkWin() {\n    return this.board.some((row) => row.includes(2048));\n  }\n\n  movesAvailable() {\n    for (let r = 0; r < this.size; r++) {\n      for (let c = 0; c < this.size; c++) {\n        if (this.board[r][c] === 0) {\n          return true;\n        }\n\n        if (r < this.size - 1 && this.board[r][c] === this.board[r + 1][c]) {\n          return true;\n        }\n\n        if (c < this.size - 1 && this.board[r][c] === this.board[r][c + 1]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","size","score","status","board","createEmptyBoard","Array","from","length","fill","moveLeft","moved","row","newRow","filter","v","i","push","join","afterMove","moveRight","map","reverse","moveUp","transpose","moveDown","newBoard","r","c","getScore","getState","getStatus","start","addRandomTile","restart","emptyCells","Math","floor","random","checkWin","movesAvailable","some","includes","$09e991522ca7e64e$var$table","document","querySelector","$09e991522ca7e64e$var$scoreDisplay","$09e991522ca7e64e$var$mainButton","$09e991522ca7e64e$var$message","$09e991522ca7e64e$var$render","state","cells","querySelectorAll","flat","forEach","value","index","cell","className","textContent","classList","add","remove","addEventListener","contains","msg","e","key"],"version":3,"file":"index.60426573.js.map"}